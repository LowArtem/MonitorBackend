using Microsoft.EntityFrameworkCore;
using MonitorBackend.Data.Entity;
using MonitorBackend.Data.Repositories.Abstract;

namespace MonitorBackend.Services;

public class MalwareService
{
    private readonly IRepository<Malwarereport> _malwareRepository;

    public MalwareService(IRepository<Malwarereport> malwareRepository)
    {
        _malwareRepository = malwareRepository;
    }

    public async Task<List<Malwarereport>?> GetAllMalwares()
    {
        try
        {
            var malwares = await _malwareRepository.GetAllAsync();
            return malwares.Count == 0 ? null : malwares;
        }
        catch (Exception e)
        {
            return null;
        }
    }

    public async Task<List<Malwarereport>?> GetMalwaresByComputerId(int computerId)
    {
        try
        {
            var malwares = await _malwareRepository.Items.Where(m => m.IdDevice == computerId).ToListAsync();
            return malwares.Count == 0 ? null : malwares;
        }
        catch (Exception e)
        {
            return null;
        }
    }

    public async Task<List<Malwarereport>?> GetMalwaresByType(int typeId)
    {
        try
        {
            var malwares = await _malwareRepository.Items.Where(m => m.IdMalwaretype == typeId).ToListAsync();
            return malwares.Count == 0 ? null : malwares;
        }
        catch (Exception e)
        {
            return null;
        }
    }

    public async Task AddMalwares(List<Malwarereport> malwares)
    {
        _malwareRepository.AutoSaveChanges = false;
        foreach (var malware in malwares)
        {
            await _malwareRepository.AddAsync(malware);
        }

        await _malwareRepository.SaveChangesAsync();
        _malwareRepository.AutoSaveChanges = true;
    }
}